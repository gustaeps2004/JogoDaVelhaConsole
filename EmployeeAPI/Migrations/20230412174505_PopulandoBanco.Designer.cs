// <auto-generated />
using System;
using EmployeeAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeAPI.Migrations
{
    [DbContext(typeof(AppdbContext))]
    [Migration("20230412174505_PopulandoBanco")]
    partial class PopulandoBanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeAPI.Models.Adress", b =>
                {
                    b.Property<int>("AdressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressId"), 1L, 1);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AdressId");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("TB_ADREESSES", (string)null);

                    b.HasData(
                        new
                        {
                            AdressId = 1,
                            Cep = "89224-475",
                            City = "Joinville",
                            Complement = "Bloco 06 apt 201",
                            EmployeeId = 1,
                            Neighborhood = "Jardim Iririu",
                            Number = 1215,
                            Street = "Areia Branca"
                        });
                });

            modelBuilder.Entity("EmployeeAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("OfficeId");

                    b.ToTable("TB_EMPLOYEES", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Cpf = "432.756.645-43",
                            Email = "amanda@gmail.com",
                            MotherName = "Marlene Dal Pra",
                            Name = "Amanda Do Espirito Santo",
                            OfficeId = 2,
                            Password = "Neg@7699",
                            Sex = "Fêmea",
                            UserName = "amandaeps"
                        });
                });

            modelBuilder.Entity("EmployeeAPI.Models.Positions", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("OfficeId");

                    b.ToTable("TB_POSITIONS", (string)null);

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            Description = "Junior Developer"
                        },
                        new
                        {
                            OfficeId = 2,
                            Description = "Engineer Developer"
                        },
                        new
                        {
                            OfficeId = 3,
                            Description = "Senior Developer"
                        },
                        new
                        {
                            OfficeId = 4,
                            Description = "Back-End Developer"
                        },
                        new
                        {
                            OfficeId = 5,
                            Description = "Front-End Developer"
                        },
                        new
                        {
                            OfficeId = 6,
                            Description = "Full-Stack Developer"
                        },
                        new
                        {
                            OfficeId = 7,
                            Description = "Senior Back-End Developer"
                        });
                });

            modelBuilder.Entity("EmployeeAPI.Models.Adress", b =>
                {
                    b.HasOne("EmployeeAPI.Models.Employee", "Employee")
                        .WithOne("Adress")
                        .HasForeignKey("EmployeeAPI.Models.Adress", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeAPI.Models.Employee", b =>
                {
                    b.HasOne("EmployeeAPI.Models.Positions", "Office")
                        .WithMany("Employee")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("EmployeeAPI.Models.Employee", b =>
                {
                    b.Navigation("Adress");
                });

            modelBuilder.Entity("EmployeeAPI.Models.Positions", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
